## COMANDOS ##

git config --global
    user.name: configura o usuário local
    user.email: configura o email do usuário

git config --list: lista as configurações salvas

git init: inicializa um repositório no diretório atual

git add: adiciona arquivo ao repositório; opções:
    [nome-do-arquivo]: arquivos de forma individual
    --all: todos os arquivos
    -A: todos os arquivos
    .: todos os arquivos

git diff: exibe as alterações feitas que ainda não foram adicionadas (staged)
    --cached: exibe as alterações quando já adicionadas (staged)
    --staged: idem ao anterior

git log: lista o histórico das alterações (mais recentes), bem como informações acerca das alterações
    --oneline: exibe as alterações de forma compacta, em uma única linha
    -[n]: limita a quantidade de logs exibidos (de acordo com o que foi informado no parâmetro [n])
    -p: exibe também as alterações internas dos arquivos modificados ("diff")
    --stat: mostra a quantidade de alterações em cada arquivo, sem exibir as mudanças em si
    --shortstat: variante resumida da opção --stat
    --name-only: exibe apenas o status dos arquivos em determinado log, por letras:
        - M: modificado
        - A: arquivo novo / adicionado
        - D: removido
    --abbrev-commit: limita os caracteres exibidos no log, forma reduzida
    --relative-date: mostra a data da alteração em relação à data atual

git checkout: "aponta" a branch local para detarminada branch / revisão
    [revision-number]: retorna o repositório local para o estado em que estava no commit indicado no parâmetro; utilizado para consulta
    [nome-do-arquivo]: desfaz todas as alterações feitas no arquivo especificado (reverte)
    [nome-da-branch]: alterna para a branch indicada
    -b [nome-da-branch]: cria nova branch, de acordo com o nome indicado, e na sequência faz checkout para a mesma
    
git reset --hard: descarta todas as alterações feitas localmente (desde o último commit), para arquivos em estado de staged
    reset: indica as alterações que serão desfeitas
    --hard: efetua a reversão

git clean: desfaz alterações não rastreads (unstaged, novos arquivos)
    -f: reverte arquivos não rastreados (untracked)

git clone: clona um repositório (local ou remoto)
    remote add origin [uri-do-projeto-no-github]: clona o projeto de origem remota, conforme indicado na URL

git pull: baixa a versão mais atual no servidor remoto

git branch: lista as branches disponíveis, indicando (com '*') a branch atual.
    [nome-da-branch]: cria nova branch com o nome indicado
    -d [nome-da-branch]: remove a branch local indicada. Obs.: para remover determinada branch, não se pode estar "checkada" na mesma
    -D [nome-da-branch]: idem ao anterior, opção que força a exclusão mesmo que ocorram validações impedindo
    -m [nome-atual] [novo-nome]: renomeia a branch indicada. Obs.: caso não esteja checkado na branch desejada, indicar qual branch será renomeada

git commit: rastrea as alterações adicionadas (git add), deixando-as aptas a serem enviadas ao repositório
    -m "[mensagem-descritiva]": adiciona mensagem de comentário breve sobre a alteração feita e que está sendo commitada 

git push: envia as alterações (commitadas) para o repositório remoto.
    --set-upstream origin [nome-da-branch-remota]: cria nova branch no servidor remoto, com o nome indicado, com base na nova brach criada localmente, "sincronizando" as duas
    -u origin [nome-da-branch]: idem ao item anterior
    --delete [nome-da-branch]: exclui a branch indicada no servidor remoto

git tag: lista as tags criadas durante o processo de desenvolvimento
    -a [numero-da-versao]: cria uma tag
    -m "[mensagem-descritiva]": adiciona comentário à tag sendo criada
    -d [nome-da-tag]: remove localmente a tag indicada
    --delete origin [nome-da-tag]: remove a tag do repositório remoto (origin)

git stash: salva temporariamente as alterações feitas no repositório local
    -list: lista as alteações salvas até o momento
    save "[mensagem-descritiva]: adiciona comentário ao registro salvo (de forma semelhante à opção -m do comando commit)
    apply [id-stash (opcional)]: reverte para a alteração indicada salva no stash. Obs: se não indicada versão do stash, aplica a mais recente disponível
    pop [id-stash (opcional)]: idem ao anterior, porém já exclui o stash aplicado
    clear: remove todos os stashes salvos